# -*- coding: utf-8 -*-
"""TD1 ATDN2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RedB7YayZ462qFyKgOLyW_4_b1OSKNXs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import statsmodels.api as sm
from statsmodels.formula.api import ols
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
import statsmodels.formula.api as sm

data = pd.read_csv('rendement_mais.csv')
print(data.head)





moy_rendement = data['RENDEMENT_T_HA'].mean()
mediane_rendement = data['RENDEMENT_T_HA'].median()
mode_rendement = data['RENDEMENT_T_HA'].mode()[0]

print(f"Moyenne Rendement: {moy_rendement}")
print(f"Mediane Rendement: {mediane_rendement}")
print(f"Mode Rendement: {mode_rendement}")

std_dev = data['RENDEMENT_T_HA'].std()
variance = data['RENDEMENT_T_HA'].var()
etendue = data['RENDEMENT_T_HA'].max() - data['RENDEMENT_T_HA'].min()

print(f"Écart-type: {std_dev}, Variance: {variance}, Étendue: {etendue}")

fig, axes = plt.subplots(1, 3, figsize=(18, 5))
sns.histplot(data['RENDEMENT_T_HA'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Histogramme du Rendement (t/ha)')
sns.histplot(data['PRECIPITATIONS_MM'], bins=10, kde=True, color='orange', ax=axes[1])
axes[1].set_title('Histogramme des Précipitations (mm)')
sns.histplot(data['TEMPERATURE_C'], bins=10, kde=True, color='green', ax=axes[2])
axes[2].set_title('Histogramme de la Température (°C)')
plt.tight_layout()
plt.show()

fig, axes = plt.subplots(1, 3, figsize=(18, 5))
sns.boxplot(x=data['RENDEMENT_T_HA'], ax=axes[0])
axes[0].set_title('Boxplot du Rendement (t/ha)')
sns.boxplot(x=data['PRECIPITATIONS_MM'], ax=axes[1], color='orange')
axes[1].set_title('Boxplot des Précipitations (mm)')
sns.boxplot(x=data['TEMPERATURE_C'], ax=axes[2], color='green')
axes[2].set_title('Boxplot de la Température (°C)')
plt.tight_layout()
plt.show()

data['TYPE_SOL'] = pd.factorize(data['TYPE_SOL'])[0]
correlation_matrix = data.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Matrice de corrélation')
plt.show()

X = data.drop(columns=['RENDEMENT_T_HA'])
y = data['RENDEMENT_T_HA']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae}, RMSE: {rmse}, R²: {r2}")

X = sm.add_constant(X)
model = sm.OLS(y, X).fit()
print(model.summary())

model = ols('RENDEMENT_T_HA ~ TYPE_SOL', data=data).fit()
anova_table = sm.stats.anova_lm(model, typ=2)
print(anova_table)

